#+TITLE: Emacs configuration
#+AUTHOR: Lucas Cordeiro

* Default configs
  
** General

Enable to answer yes/no questions with y/n

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Fix up the "dead" keys.

#+BEGIN_SRC emacs-lisp
  (require 'iso-transl)
#+END_SRC

*** Setup personal info

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Lucas Edi C. de Brito"
        user-mail-address "ecdb.lucas@gmail.com")
#+END_SRC

** Melpa

Melpa repository

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))

  (when (< emacs-major-version 24)
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
#+END_SRC

** Theme and display options

Hide the menu bar, scroll bar and tool bar.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

I like tabs to be 2 spaces wide.

#+BEGIN_SRC emacs-lisp
  (setq default-tab-width 2)
#+END_SRC

Theme and cursor color.

#+BEGIN_SRC emacs-lisp
  (load-theme 'gruvbox t)
  (set-cursor-color "#ffffff")
#+END_SRC

Add my favorite font as the default one.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :font "Source Code Pro for Powerline"
                      :height 105)
#+END_SRC

** File encoding

Prefer UTF-8 encoding for files

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
#+END_SRC

** Mode-line

Setup powerline and display

#+BEGIN_SRC emacs-lisp
  (require 'powerline)

  ;; (powerline-default-theme)
#+END_SRC

Setup mode-line colors to work with gruvbox theme

#+BEGIN_SRC emacs-lisp
  ;; (setq )
#+END_SRC

** Line number
   
Set global linum-relative-mode

#+BEGIN_SRC emacs-lisp
  (require 'linum-relative)

  (global-linum-mode t)
  (linum-relative-toggle)
#+END_SRC

Exclude specific modes from showing line numbers

#+BEGIN_SRC emacs-lisp
  (setq no-linum-modes-hook
        '(dired-mode-hook
          eshell-mode-hook
          help-mode-hook))

  (dolist (hook no-linum-modes-hook)
    (add-hook hook 'disable-linum))
#+END_SRC

Helper function to disable linum-mode

#+BEGIN_SRC emacs-lisp
  (defun disable-linum ()
    (linum-mode -1))
#+END_SRC


* Web stuff

** HTML

Add emmet-mode for quick tag creation and web-mode, also, set indentation for 4 spaces.

#+BEGIN_SRC emacs-lisp
  (add-hook 'html-mode-hook
            (lambda ()
              (web-mode)
              (set (make-local-variable 'sgml-basic-offset) 4)))
            
  (add-hook 'web-mode-hook 'emmet-mode)
#+END_SRC

** Javscript

Set web-mode to jsx files.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
#+END_SRC

Add js2-mode to common javascript files.
Also, don't warn me for missing semicolons, please.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  (setq js2-strict-missing-semi-warning nil)
#+END_SRC


* Languages

I like tabs to be 4 spaces wide.

#+BEGIN_SRC emacs-lisp
  (setq default-tab-width 4)
#+END_SRC

** Smartparens

Add global smartparens mode

#+BEGIN_SRC emacs-lisp
  (smartparens-global-mode)
#+END_SRC

** C and derivates
   
Set the identation level to 4 spaces

#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4)
#+END_SRC

** Lisp

Auto add smartparens mode and eldoc-mode to all lisp modes

#+BEGIN_SRC emacs-lisp
  (setq lispy-mode-hooks
        '(clojure-mode-hook
          emacs-lisp-mode-hook
          lisp-mode-hook
          scheme-mode-hook))

  (dolist (hook lispy-mode-hooks)
    (add-hook hook
              (lambda()
                (smartparens-mode)
                (eldoc-mode))))
#+END_SRC


* Org-mode
  
** Display preferences

Show bullets instead of asteriscs.

#+BEGIN_SRC emacs-lisp
  (require 'org-bullets)

  (add-hook 'org-mode-hook
            (lambda()
              (org-bullets-mode 1)))
#+END_SRC

Show utf-8 characters

#+BEGIN_SRC emacs-lisp
  (setq org-pretty-entities t)
#+END_SRC


* =evil-mode=

Setup evil mode

#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (evil-mode)
#+END_SRC
